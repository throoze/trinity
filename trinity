#!/usr/bin/env python
# ------------------------------------------------------------
# trinity
#
# Program for lexical analysis of programs in trinity language.
#
# Authors:
# Victor De Ponte, 05-38087, <rdbvictor19@gmail.com>
# Francisco Martinez, 09-10502, <frammnm@gmail.com>
#
# Usage:
#
#     $ ./trinity program.ty
#
# where program.ty is a file with theprogram to be analyzed.
# ------------------------------------------------------------
from lexer.lexer import Lexer
from lexer.exceptions import LexicographicalError

from lang import lexical_specs, syntactic_specs
from lang.exceptions import TrinitySyntaxError

import ply.yacc as yacc
import sys

SUCCESS = 0
ERR_BAD_USAGE = 1
ERR_BAD_FILENAME = 2
ERR_IO_ERROR = 3
ERR_LEXICOGRAPHICAL_ERROR = 4
ERR_SYNTAX_ERROR = 5

usage = ' Usage:\n\n\t$ ./trinity program.ty\n\n where "program.ty" is a file with the program to be analyzed.'

if len(sys.argv) == 2:
    filename = sys.argv[1]
else:
    print usage
    exit(ERR_BAD_USAGE)

try :
    file = open(filename, 'r')
except IOError as e:
    print "trinity: IOError: %s" % str(e)
    exit(ERR_BAD_FILENAME)

try:
    inputString = file.read()
except IOError as e:
    print "trinity: IOError: %s" % str(e)
    exit(ERR_IO_ERROR)

lexer = Lexer(module=lexical_specs, inputString=inputString)
#lexer = Lexer(module=lexical_specs, inputString=inputString, debug=True)
#if not lexer.lex(silent=True):
parser = yacc.yacc(module=syntactic_specs)
try:
    ast = parser.parse(lexer=lexer)
    if ast is not None:
        print ast
    exit(SUCCESS)
except LexicographicalError as le:
    print le
    exit(ERR_LEXICOGRAPHICAL_ERROR)
except TrinitySyntaxError as se:
    print se
    exit(ERR_SYNTAX_ERROR)
